########################################################################
#                                                                      #
# Spindle Controller deployer file. deployer file.                	   #
#                                                                      #
# Max Baeten				                       					   #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var int TUE_HighestPriority             = 46
var double 	TS 							= 0.001
var strings JOINT_NAMES 				= strings( "torso_joint" )
var double 	ENCODERBITS					= 65536.0
var double 	ENC2SI 						= -4.1666667e-7; # Minus because spindle up is defined positive. 10cm=240.000 counts
var array 	MAXERR						= array(0.01)
var int 	N 							= 1
var int 	BODYPARTNR 					= 2
var string 	BODYPARTNAME 				= "spindle"
var string	ROBOTNS						= os.getenv("ROBOTNS")
var bool 	HOMEABLE 					= true
var bool 	HOMINGOBLIGATORY			= true
var bool 	RESETTABLE					= false

### Configuring Supervisor, JointStateAggregator and TrajectoryActionlib
Supervisor.AddBodyPart( BODYPARTNR, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addAggregationPort("torso")
TrajectoryActionlib.AddBodyPart(BODYPARTNR, JOINT_NAMES)
TrajectoryActionlib.interpolatorDt2 	= TS
TrajectoryActionlib.interpolatorEps2	= 1.0
EtherCATread.AddEncoderIns(BODYPARTNAME,array(1.0), array(1.0),array(1.0),array(1.0))
EtherCATread.AddEnc2Si_E(BODYPARTNAME, 1, array(ENCODERBITS), array(ENC2SI))
EtherCATread.AddDigitalIns(BODYPARTNAME, array(8.0), array(1.0, 1.0), array(1.0, 1.0), array(1.0, 2.0))
EtherCATread.AddMsgOut_D(BODYPARTNAME,1)
EtherCATread.AddMsgOut_D(BODYPARTNAME,2)
connect("Soem.Slave_100a.bits", 		"EtherCATread.spindle_Din1",			ConnPolicy() )
stream("EtherCATread.spindle_DoutMsg1", ros.topic(ROBOTNS+"/spindle_homeswitch") )
stream("EtherCATread.spindle_DoutMsg2", ros.topic(ROBOTNS+"/spindle_endstop") )

# Publish JointState Component
loadComponent("SPINDLE_WriteJointStates","ROS::DoublesToJointState")
setActivity("SPINDLE_WriteJointStates",0.05,LowestPriority,ORO_SCHED_OTHER)
SPINDLE_WriteJointStates.JointNames 	= JOINT_NAMES
SPINDLE_WriteJointStates.configure

### Negative feedback controller ###
loadComponent("SPINDLE_Controller",		"FILTERS::Controller")
setActivity("SPINDLE_Controller",0.0,TUE_HighestPriority,ORO_SCHED_RT)
SPINDLE_Controller.vector_size    		= N
SPINDLE_Controller.gains				= array(-80.0); # -40.0
SPINDLE_Controller.controllers			= strings("WeakIntegrator","LeadLag","LowPass")
SPINDLE_Controller.sampling_time		= TS
SPINDLE_Controller.number_of_refports	= 1
SPINDLE_Controller.refinport_sizes		= ints(N)
SPINDLE_Controller.number_of_ffwports	= 1
SPINDLE_Controller.zero_freq_WeakIntegrator	= array(0.03); # 0.3
SPINDLE_Controller.zero_freq_LeadLag	= array(1.6)
SPINDLE_Controller.pole_freq_LeadLag	= array(60.0)
SPINDLE_Controller.pole_freq_LowPass	= array(20.0)
SPINDLE_Controller.pole_damp_LowPass	= array(0.7)
SPINDLE_Controller.configure

#Calculating Feed Forward
loadComponent("SPINDLE_FFW",			"CalculateFFW")
setActivity("SPINDLE_FFW",TS,TUE_HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","SPINDLE_FFW")
SPINDLE_FFW.FFWgrav 					= 0.07
SPINDLE_FFW.FFWstat 					= 0.05
SPINDLE_FFW.FFWdyn 						= 0.4
SPINDLE_FFW.FFWacc 						= 0.3
SPINDLE_FFW.direction 					= -1.0
SPINDLE_FFW.configure

### Safety ###
loadComponent("SPINDLE_Safety",			"SUPERVISORY::Safety")
addPeer("Supervisor","SPINDLE_Safety")
setActivity("SPINDLE_Safety",0.0,TUE_HighestPriority,ORO_SCHED_RT)
addPeer("SPINDLE_Safety","TrajectoryActionlib")
SPINDLE_Safety.prefix 					= "SPINDLE"
SPINDLE_Safety.partNr 					= BODYPARTNR
SPINDLE_Safety.Nj						= N
SPINDLE_Safety.Nm						= N
SPINDLE_Safety.maxJointErrors			= MAXERR
SPINDLE_Safety.motorSaturations			= array(100.0)
SPINDLE_Safety.maxConSatTime			= 1.0
SPINDLE_Safety.additional_safeties		= strings("endswitch")
SPINDLE_Safety.configure

#Loading Homing component
loadComponent("SPINDLE_Homing",			"SUPERVISORY::Homing")
connectPeers("Supervisor","SPINDLE_Homing")
addPeer("SPINDLE_Homing","SPINDLE_Safety")
addPeer("SPINDLE_Homing","TrajectoryActionlib")
addPeer("SPINDLE_Homing","EtherCATread")
setActivity("SPINDLE_Homing",TS,TUE_HighestPriority,ORO_SCHED_RT)
SPINDLE_Homing.new_structure 			= true
SPINDLE_Homing.vector_size 				= N
SPINDLE_Homing.number_of_outports 		= 1
SPINDLE_Homing.outport_sizes			= ints(1)
SPINDLE_Homing.bodypart 				= BODYPARTNAME
SPINDLE_Homing.prefix 					= "SPINDLE"
SPINDLE_Homing.partNr 					= BODYPARTNR
SPINDLE_Homing.jointnames				= JOINT_NAMES
SPINDLE_Homing.homing_type				= ints(1)
SPINDLE_Homing.require_homing			= ints(1)
SPINDLE_Homing.require_reset			= ints(1)
SPINDLE_Homing.homing_order				= ints(1)
SPINDLE_Homing.homing_direction			= ints(1)
SPINDLE_Homing.homing_velocity			= array(0.01)
SPINDLE_Homing.homing_acceleration		= array(0.02)
SPINDLE_Homing.homing_stroke			= array(0.0)
SPINDLE_Homing.reset_stroke				= array(0.41)
SPINDLE_Homing.homing_endpos			= array(0.35)
SPINDLE_Homing.interpolatorDt			= TS
SPINDLE_Homing.interpolatorEps			= 1.0
SPINDLE_Homing.configure

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("SPINDLE_Diagnostics",	"ROS::RosDiagnostics")
setActivity("SPINDLE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
SPINDLE_Diagnostics.statusname 			= BODYPARTNAME+"_Controller"
SPINDLE_Diagnostics.NumberOfVectorPorts = 3
SPINDLE_Diagnostics.NumberOfBoolPorts 	= 1
SPINDLE_Diagnostics.configure
SPINDLE_Diagnostics.vecname1 			= "Reference"
SPINDLE_Diagnostics.vecname2 			= "Error"
SPINDLE_Diagnostics.vecname3 			= "ControlEffort"
SPINDLE_Diagnostics.boolname1 			= "Safe"

#### CONNECT COMPONENTS ####
## Control loop	##
connect("Soem.Slave_1006.Slave_1006_value",			"EtherCATread.spindle_Ein1", 				ConnPolicy() ); # Enc 1
connect("EtherCATread.spindle_Eout1",				"SPINDLE_Controller.pos_in", 				ConnPolicy() ); # Position
connect("SPINDLE_FFW.FFW_out",						"SPINDLE_Controller.ffw_in1", 				ConnPolicy() ); # FFW
connect("SPINDLE_Controller.out", 					"EtherCATwrite.base_Ain2", 					ConnPolicy() ); # ControlEffort [V]

## References ##
connect("EtherCATread.spindle_Eout1",				"TrajectoryActionlib.current_pos2",			ConnPolicy() ); # Ref Pos
connect("TrajectoryActionlib.pos_out2",				"SPINDLE_Controller.ref_in1", 				ConnPolicy() ); # Ref Pos
connect("TrajectoryActionlib.vel_out2",				"SPINDLE_FFW.ref_vel", 						ConnPolicy() ); # Ref Vel
connect("TrajectoryActionlib.acc_out2",				"SPINDLE_FFW.ref_acc", 						ConnPolicy() ); # Ref Acc

## Ros communication ##
connect( "EtherCATread.spindle_Eout1", 				"SPINDLE_WriteJointStates.pos_in", 			ConnPolicy() ); # Position
connect("SPINDLE_WriteJointStates.out", 			"JointStateAggregator.torso", 				ConnPolicy() ); # JointState

## Homing ##
connect("EtherCATread.spindle_Eout1",				"SPINDLE_Homing.position", 					ConnPolicy() ); # Position
connect("EtherCATread.spindle_DoutMsg1",			"SPINDLE_Homing.homeswitch", 				ConnPolicy() ); # homeswitch
connect("SPINDLE_Homing.homing_finished",			"Supervisor.spindle_homingfinished", 		ConnPolicy() ); # Homing_finished
connect("SPINDLE_Homing.posout1",					"SPINDLE_Controller.ref_in1", 				ConnPolicy() ); # Ref Pos
connect("SPINDLE_Homing.velout1",					"SPINDLE_FFW.ref_vel", 						ConnPolicy() ); # Ref Vel
connect("SPINDLE_Homing.accout1",					"SPINDLE_FFW.ref_acc", 						ConnPolicy() ); # Ref Acc

## Safety ##
connect("SPINDLE_Controller.jointErrors",			"SPINDLE_Safety.jointErrors", 				ConnPolicy() ); # Joint Errors
connect("SPINDLE_Controller.out",					"SPINDLE_Safety.controlEffort", 			ConnPolicy() ); # ControlEffort
connect("EtherCATread.spindle_DoutMsg2",			"SPINDLE_Safety.endswitch", 				ConnPolicy() );	# Endstop
connect("SPINDLE_Safety.enable",					"SPINDLE_Controller.enable", 				ConnPolicy() ); # Enable
connect("SPINDLE_Safety.error",						"Supervisor.spindle_error", 				ConnPolicy() ); # Spindle_error
connect("SPINDLE_Safety.enable", 					"EtherCATwrite.generic_Din3", 				ConnPolicy() ); # Enabling amp/disabling brake

## Diagnostics ##
connect("TrajectoryActionlib.pos_out2", 			"SPINDLE_Diagnostics.vec1", 				ConnPolicy() ); # Reference
connect("SPINDLE_Controller.jointErrors", 			"SPINDLE_Diagnostics.vec2", 				ConnPolicy() ); # JointErrors
connect("SPINDLE_Controller.out", 					"SPINDLE_Diagnostics.vec3", 				ConnPolicy() ); # ControlEffort
connect("SPINDLE_Safety.enable",					"SPINDLE_Diagnostics.bool1", 				ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream("SPINDLE_Diagnostics.diagnostics", 			ros.topic(ROBOTNS+"/diagnostics"))
stream("SPINDLE_WriteJointStates.out", 				ros.topic(ROBOTNS+"/torso/measurements"))

# Reset Encoder
EtherCATread.ResetEncoders(BODYPARTNR, 1, array(0.0));

#### START COMPONENTS ####
SPINDLE_WriteJointStates.start()
SPINDLE_Diagnostics.start()
SPINDLE_Controller.start()

Supervisor.AddHomingOnlyPeer(	"SPINDLE_Homing", 				BODYPARTNR )

Supervisor.AddEnabledPeer(		"SPINDLE_FFW", 					BODYPARTNR )
Supervisor.AddEnabledPeer(		"SPINDLE_Safety", 				BODYPARTNR )

## Tracing ##
#loadComponent("Tracing","Signal::Tracing")
#setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
#Tracing.buffersize                      = 60000
#Tracing.filename                        = "/home/amigo/hardwarelogs/log.dat"
#Tracing.vector_sizes                    = array(1.0,1.0,1.0,1.0)
#Tracing.configure
#connect("SPINDLE_Controller.references",          "Tracing.in1",                  ConnPolicy() ) # Ref
#connect("EtherCATread.spindle_Eout1",             "Tracing.in2",                  ConnPolicy() ) # Pos
#connect("SPINDLE_Controller.jointErrors",         "Tracing.in3",                  ConnPolicy() ) # Err
#connect("SPINDLE_Controller.out",                 "Tracing.in4",                  ConnPolicy() ) # Out
#Tracing.start
