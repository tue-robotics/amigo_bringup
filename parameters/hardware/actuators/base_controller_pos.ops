########################################################################
#                                                                      #
# Base controller deployer file 									   #
#                                                                      #
# Tim Clephas                                                          #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var int TUE_HighestPriority             = 46
var double 	TS 							= 0.001
var double 	WHEELRAD 					= 0.075*0.9825; 				# Corrected for effective wheel radius
var double 	DIS2CENT 					= 0.29072 * 64.0 / 62.8; 		# (Correction for corrected TWOPI)
var double 	HALFSQRT2					= 0.7071
var double 	TORQUE2CURRENT 				= 1.0/0.0302; 					# [Amp/Nm]
var double 	CURRENT2VOLT 				= 1.0/1.0
var double 	GEARRATIO 					= 8.0/343.0
var double 	TWOPI 						= 2.0*3.141592
var double 	ENCODERCOUNTS 				= 500.0*4.0;					# 85750 counts per wheel rotation
var double 	ENCODERBITS					= 65536.0
var double 	ENC2SI 						= TWOPI*GEARRATIO/ENCODERCOUNTS
var double 	SI2V 						= TORQUE2CURRENT * CURRENT2VOLT * GEARRATIO
var array  	MAX_ERRORS 					= array( 2.2, 2.2, 2.2, 2.2 )
var array  	MAX_VELOCITIES				= array(1.8, 1.0, 3.1415)
var int    	N							= 4
var string	ROBOTNS						= os.getenv("ROBOTNS")
var int 	BODYPARTNR 					= 1
var string 	BODYPARTNAME 				= "base"
var bool 	HOMEABLE 					= false
var bool 	HOMINGOBLIGATORY			= false
var bool 	RESETTABLE					= true

### AddBodyPart ###
Supervisor.AddBodyPart( BODYPARTNR, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)
EtherCATread.AddEncoderIns(BODYPARTNAME,array(1.0, 1.0, 1.0, 1.0), array(4.0),array(1.0, 2.0, 3.0, 4.0),array(1.0, 1.0, 1.0, 1.0))
EtherCATread.AddEnc2Si_E(BODYPARTNAME, 1, array(ENCODERBITS, ENCODERBITS, ENCODERBITS, ENCODERBITS), array(ENC2SI, ENC2SI, ENC2SI, ENC2SI))
EtherCATwrite.AddAnalogOuts(BODYPARTNAME, array(4.0, 1.0), array(8.0),array(1.0, 1.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0),array(1.0, 2.0, 3.0, 4.0, 1.0, 0.0, 0.0, 0.0))
EtherCATwrite.AddMultiply_A(BODYPARTNAME, 1, array(SI2V, SI2V, SI2V, SI2V))

### DECOUPLE POSITION ###
loadComponent("BASE_MotorToJointSpace",	"MATH::MatrixTransform")
setActivity("BASE_MotorToJointSpace",0.0,TUE_HighestPriority,ORO_SCHED_RT)
BASE_MotorToJointSpace.Nrows 			= 3
BASE_MotorToJointSpace.Ncolumns 		= 4
BASE_MotorToJointSpace.configure
BASE_MotorToJointSpace.function1 		= array(-0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BASE_MotorToJointSpace.function2 		= array( 0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BASE_MotorToJointSpace.function3 		= array( 0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT)

#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("BASE_OdometryPublisher","ROS::PublishOdometry")
setActivity("BASE_OdometryPublisher",0.05,LowestPriority,ORO_SCHED_OTHER)
BASE_OdometryPublisher.base_link_frame 	= ROBOTNS+"/base_link"
BASE_OdometryPublisher.odom_frame 		= ROBOTNS+"/odom"
BASE_OdometryPublisher.configure

### READ REFERENCE VELOCITIES ###
loadComponent("BASE_ReadReferences",	"ROS::ReadTwistMsg")
addPeer("Supervisor",					"BASE_ReadReferences")
setActivity("BASE_ReadReferences",TS,TUE_HighestPriority,ORO_SCHED_RT)
BASE_ReadReferences.max_start_vel 		= 1.0
BASE_ReadReferences.max_vel 			= MAX_VELOCITIES
BASE_ReadReferences.max_acc 			= array(0.7, 0.7, 2.0)
BASE_ReadReferences.max_interval 		= 1.0
BASE_ReadReferences.configure

### DECOUPLE REFERENCE ###
loadComponent("BASE_JointToMotorSpace",	"MATH::MatrixTransform")
addPeer("Supervisor","BASE_JointToMotorSpace")
setActivity("BASE_JointToMotorSpace",0.0,TUE_HighestPriority,ORO_SCHED_RT)
BASE_JointToMotorSpace.Nrows = N
BASE_JointToMotorSpace.Ncolumns = 3
BASE_JointToMotorSpace.configure
BASE_JointToMotorSpace.function1 		= array(-HALFSQRT2/WHEELRAD, HALFSQRT2/WHEELRAD, DIS2CENT/WHEELRAD)
BASE_JointToMotorSpace.function2 		= array(-HALFSQRT2/WHEELRAD,-HALFSQRT2/WHEELRAD, DIS2CENT/WHEELRAD)
BASE_JointToMotorSpace.function3 		= array( HALFSQRT2/WHEELRAD,-HALFSQRT2/WHEELRAD, DIS2CENT/WHEELRAD)
BASE_JointToMotorSpace.function4 		= array( HALFSQRT2/WHEELRAD, HALFSQRT2/WHEELRAD, DIS2CENT/WHEELRAD)

### VELOCITY TO POSITION ###
loadComponent("BASE_VelocityToPosition","MATH::Integrator")
addPeer("Supervisor","BASE_VelocityToPosition")
setActivity("BASE_VelocityToPosition",0.0,TUE_HighestPriority,ORO_SCHED_RT)
BASE_VelocityToPosition.vector_size 	= N
BASE_VelocityToPosition.configure

### Negative feedback controller ###
loadComponent("BASE_Controller","FILTERS::Controller")
setActivity("BASE_Controller",0.0,TUE_HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","BASE_Controller")
BASE_Controller.vector_size    			= N
BASE_Controller.controllers				= strings("WeakIntegrator","LeadLag","LowPass")
BASE_Controller.sampling_time			= TS
BASE_Controller.number_of_refports		= 1
BASE_Controller.refinport_sizes			= ints(N)
BASE_Controller.number_of_ffwports		= 0
BASE_Controller.gains					= array(5.0, 		5.0, 		5.0, 		5.0)
BASE_Controller.zero_freq_WeakIntegrator= array(0.0001, 	0.0001, 	0.0001, 	0.0001)
BASE_Controller.zero_freq_LeadLag		= array(15.0, 		15.0, 		15.0, 		15.0)
BASE_Controller.pole_freq_LeadLag		= array(50.0, 		50.0, 		50.0, 		50.0)
BASE_Controller.pole_freq_LowPass		= array(100.0, 	100.0, 		100.0, 		100.0)
BASE_Controller.pole_damp_LowPass		= array(0.7, 		0.7, 		0.7, 		0.7)
BASE_Controller.configure

### Safety ###
loadComponent("BASE_Safety",			"SUPERVISORY::Safety")
addPeer("Supervisor","BASE_Safety")
setActivity("BASE_Safety",0.0,TUE_HighestPriority,ORO_SCHED_RT)
BASE_Safety.prefix 						= "BASE"
BASE_Safety.partNr						= BODYPARTNR
BASE_Safety.Nj							= N
BASE_Safety.Nm							= N
BASE_Safety.maxJointErrors				= MAX_ERRORS
BASE_Safety.motorSaturations			= array(9.9, 9.9, 9.9, 9.9)
BASE_Safety.maxConSatTime				= 0.1
BASE_Safety.configure

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BASE_Diagnostics",		"ROS::RosDiagnostics")
setActivity("BASE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
BASE_Diagnostics.statusname 			= BODYPARTNAME+"_Controller"
BASE_Diagnostics.NumberOfVectorPorts 	= 2
BASE_Diagnostics.NumberOfBoolPorts 		= 1
BASE_Diagnostics.configure
BASE_Diagnostics.vecname1 				= "Reference"
BASE_Diagnostics.vecname2 				= "Error"
BASE_Diagnostics.boolname1 				= "Amplifiers"

#### CONNECT COMPONENTS ####
connect("Soem.Slave_1002.Slave_1002_value",			"EtherCATread.base_Ein1", 			ConnPolicy() ); # Enc 1
connect("Soem.Slave_1003.Slave_1003_value",			"EtherCATread.base_Ein2", 			ConnPolicy() ); # Enc 1
connect("Soem.Slave_1004.Slave_1004_value",			"EtherCATread.base_Ein3", 			ConnPolicy() ); # Enc 1
connect("Soem.Slave_1005.Slave_1005_value",			"EtherCATread.base_Ein4", 			ConnPolicy() ); # Enc 1

connect("EtherCATread.base_Eout1",					"BASE_MotorToJointSpace.in", 		ConnPolicy() ); # Positions MS
connect("BASE_MotorToJointSpace.out", 				"BASE_OdometryPublisher.pos", 		ConnPolicy() ); # Positions JS
connect("BASE_VelocityToPosition.out",				"BASE_Controller.ref_in1", 			ConnPolicy() ); # Positions
connect("EtherCATread.base_Eout1",					"BASE_Controller.pos_in", 			ConnPolicy() ); # Positions MS
connect("BASE_Controller.out", 						"EtherCATwrite.base_Ain1", 			ConnPolicy() ); # ControlEffort [V]
connect("EtherCATwrite.base_Aout1",					"Soem.Slave_100d.values", 			ConnPolicy() );
connect("BASE_ReadReferences.out",					"BASE_JointToMotorSpace.in", 		ConnPolicy() ); # Reference JS
connect("BASE_JointToMotorSpace.out",				"BASE_VelocityToPosition.in", 		ConnPolicy() ); # Reference MS
connect("EtherCATread.base_Eout1",					"BASE_VelocityToPosition.initial", 	ConnPolicy() ); # Initial position

## Safety
connect("BASE_Controller.jointErrors",				"BASE_Safety.jointErrors", 			ConnPolicy() ); # Jointerrors
connect("BASE_Controller.out",						"BASE_Safety.controlEffort", 		ConnPolicy() ); # ControlEffort
connect("BASE_Safety.enable",						"BASE_Controller.enable", 			ConnPolicy() ); # Enable
connect("BASE_Safety.error",						"Supervisor.base_error", 			ConnPolicy() ); # Base_error
connect("BASE_Safety.enable", 						"EtherCATwrite.generic_Din2", 		ConnPolicy() ); # Enable(amplifiers)

## Diagnostics ##
connect("BASE_ReadReferences.out", 					"BASE_Diagnostics.vec1", 			ConnPolicy() ); # References
connect("BASE_Controller.jointErrors", 				"BASE_Diagnostics.vec2", 			ConnPolicy() ); # JointErrors
connect("BASE_Safety.enable", 						"BASE_Diagnostics.bool1", 			ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream("BASE_OdometryPublisher.odom", 				ros.topic(ROBOTNS+"/base/measurements"));
stream("BASE_OdometryPublisher.reset", 				ros.topic(ROBOTNS+"/base/reset_odometry"));
stream("BASE_ReadReferences.cmd_vel", 				ros.topic(ROBOTNS+"/base/references"));
stream("BASE_Diagnostics.diagnostics", 				ros.topic(ROBOTNS+"/diagnostics"));

# Reset Encoder
EtherCATread.ResetEncoders(BODYPARTNR, 1, array(0.0, 0.0, 0.0, 0.0));

#### START COMPONENTS ####
BASE_MotorToJointSpace.start()
BASE_OdometryPublisher.start()
BASE_Diagnostics.start()

Supervisor.AddEnabledPeer("BASE_Controller", 		BODYPARTNR)
Supervisor.AddEnabledPeer("BASE_ReadReferences",	BODYPARTNR )
Supervisor.AddEnabledPeer("BASE_JointToMotorSpace", BODYPARTNR )
Supervisor.AddEnabledPeer("BASE_VelocityToPosition",BODYPARTNR )
Supervisor.AddEnabledPeer("BASE_Safety", 			BODYPARTNR)

