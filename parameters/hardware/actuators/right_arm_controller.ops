#########################################################################
#                                                                       #
# Right Philips Experimental Robotic Arm deployer file.                 #
#                                                                       #
# Max Baeten                                                            #
#                                                                       #
#########################################################################

#### DECLARATION OF PARAMETERS ####
var double  TS                          = 0.001
var string  SL_ID_RSHOULDER             = os.getenv("SL_ID_RSHOULDER")
var string  SL_ID_RUPPERARM             = os.getenv("SL_ID_RUPPERARM")
var string  SL_ID_RLOWERARM             = os.getenv("SL_ID_RLOWERARM")
var strings JOINT_NAMES                 = strings(  "shoulder_yaw_joint_right", "shoulder_pitch_joint_right", "shoulder_roll_joint_right", "elbow_pitch_joint_right", "elbow_roll_joint_right", "wrist_pitch_joint_right", "wrist_yaw_joint_right" )
var strings DUMMY_JOINT_NAMES           = strings(  "finger1_joint_right", "finger1_tip_joint_right", "finger2_joint_right", "finger2_tip_joint_right")
var array   UPPERJOINTLIMIT             = array(    0.0,        1.57,       1.57,       2.23,       1.83,       0.95,       0.61,       7.5)
var array   LOWERJOINTLIMIT             = array(    -1.57,      -1.57,      -1.57,      0.0,        -1.83,      -0.95,      -0.61,      -1.0)
var array   RESETPOS                    = array(    -0.1,      -0.2,         0.2,       0.8,         0.0        ,0.0        ,0.0)
var array   HOMINGSTROKE                = array(    0.0,        0.0,        -1.62,      0.0,        -1.83,      -1.05,      -0.80,      0.0)
var array   MAXERRORS                   = array(    0.09,       0.09,       0.09,       0.09,       0.09,       0.09,       0.09,       0.5)
var array   ABSPOS                      = array(    1.10,       1.732,      0.0,        0.0,        0.0,        0.0,        0.0,        0.0)
var array   ENCODERBITS                 = array(    65536.0,    65536.0,    65536.0,    65536.0,    65536.0,    65536.0,    65536.0,    65536.0)
var double  TWOPI                       = 2.0*3.141592
var double  GEARRATIO_SM                = 1.0/550.0
var double  GEARRATIO_S3                = 1.0/371.25
var double  GEARRATIO_EM                = 1.0/410.0
var double  GEARRATIO_WM                = 1.0/290.0
var double  GEARRATIO_HM                = 196.0/3249.0
var double  ENCODERCOUNTS_SM            = 256.0*4.0
var double  ENCODERCOUNTS_S3            = 256.0*4.0
var double  ENCODERCOUNTS_EM            = 500.0*4.0
var double  ENCODERCOUNTS_WM            = 128.0*4.0
var double  ENCODERCOUNTS_HM            = 8.0*128.0*4.0
var double  ENC2SI_SM                   = TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM
var double  ENC2SI_S3                   = TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3
var double  ENC2SI_EM                   = TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM
var double  ENC2SI_WM                   = TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM
var double  ENC2SI_HM                   = TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM
var array   ENC2SI                      = array(ENC2SI_SM,  ENC2SI_SM,  ENC2SI_S3,  ENC2SI_EM,  ENC2SI_EM,  ENC2SI_WM,  ENC2SI_WM,  ENC2SI_HM )
var array   SENSORTORQUES_C1            = array(    42.0,       4250.0,     94.0,       20.0,       825.0,      1.0,        1.0,        32.3375     )
var array   SENSORTORQUES_C2            = array(    -0.8,       12.0,        1.0,       -2.2,       1.0,        1.0,        1.0,        0.2         )
var array   SENSORTORQUES_C3            = array(    1500.0,     -294.40,    -30.56,     -30.9,      -168.32,    1.0,        1.0,        -37.0       )
var double  GRIPPERFORCE                = 14.0;
var double  GRIPPERHOMINGFORCE          = 12.0;
var int     N                           = 8
var int     BODYPARTNR                  = 4
var string  BODYPARTNAME                = "right_arm"
var string  ROBOTNS                     = os.getenv("ROBOTNS")
var bool    HOMEABLE                    = true
var bool    HOMINGOBLIGATORY            = false
var bool    RESETTABLE                  = true

### Configuring Supervisor, JointStateAggregator and TrajectoryActionlib
Supervisor.AddBodyPart( BODYPARTNR, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYPARTNAME)
TrajectoryActionlib.AddBodyPart(BODYPARTNR, JOINT_NAMES)
TrajectoryActionlib.interpolatorDt4     = TS
TrajectoryActionlib.interpolatorEps4    = 1.0

# EtherCATread
EtherCATread.AddEncoderIns(BODYPARTNAME,array(1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0), array(8.0),array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0),array(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))
EtherCATread.AddEnc2Si_E(BODYPARTNAME, 1, ENCODERBITS, ENC2SI)
EtherCATread.AddAnalogIns(BODYPARTNAME, array(3.0, 3.0, 3.0, 3.0, 3.0, 3.0), array(8.0, 8.0), array(1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0), array(1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0))
EtherCATread.AddMatrixTransform_E(BODYPARTNAME, 1, 8, 8)
EtherCATread.right_arm1_matrixtransform1 = array( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATread.right_arm1_matrixtransform2 = array( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATread.right_arm1_matrixtransform3 = array( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATread.right_arm1_matrixtransform4 = array( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
EtherCATread.right_arm1_matrixtransform5 = array( 0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
EtherCATread.right_arm1_matrixtransform6 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
EtherCATread.right_arm1_matrixtransform7 = array( 0.0,  0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0)
EtherCATread.right_arm1_matrixtransform8 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)
EtherCATread.AddSaturation_E(BODYPARTNAME,1, LOWERJOINTLIMIT, UPPERJOINTLIMIT)
EtherCATread.AddMsgOut_E(BODYPARTNAME, 1,JOINT_NAMES);
EtherCATread.AddTorqueSensor_A(BODYPARTNAME, 1, SENSORTORQUES_C1, SENSORTORQUES_C2, SENSORTORQUES_C3)

# EtherCATwrite
EtherCATwrite.AddAnalogOuts(BODYPARTNAME, array(8.0), array(3.0, 3.0, 3.0),array(1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),array(1.0, 2.0, 0.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0))
EtherCATwrite.AddMatrixTransform_A(BODYPARTNAME, 1, 8, 8)
EtherCATwrite.right_arm1_matrixtransform1 = array( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATwrite.right_arm1_matrixtransform2 = array(-0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATwrite.right_arm1_matrixtransform3 = array( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATwrite.right_arm1_matrixtransform4 = array( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
EtherCATwrite.right_arm1_matrixtransform5 = array( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
EtherCATwrite.right_arm1_matrixtransform6 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
EtherCATwrite.right_arm1_matrixtransform7 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
EtherCATwrite.right_arm1_matrixtransform8 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

#### HIGH PRIORITY COMPONENTS ####

### Gripper force controller ###
loadComponent("RPERA_GripperControl",   "ARM::GripperControl")
addPeer("Supervisor","RPERA_GripperControl")
setActivity("RPERA_GripperControl",TS,HighestPriority,ORO_SCHED_RT)
RPERA_GripperControl.threshold_closed   = GRIPPERFORCE
RPERA_GripperControl.max_pos            = 7.5
RPERA_GripperControl.min_pos            = 0.0
RPERA_GripperControl.gripper_vel        = 4.0
RPERA_GripperControl.gripper_acc        = 20.0
RPERA_GripperControl.InterpolDt         = TS
RPERA_GripperControl.InterpolEps        = 1.0
RPERA_GripperControl.configure

### Negative feedback controller ###
loadComponent("RPERA_Controller",       "FILTERS::Controller")
setActivity("RPERA_Controller",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Controller.vector_size            = N
RPERA_Controller.controllers            = strings("WeakIntegrator","LeadLag","LowPass")
RPERA_Controller.sampling_time          = TS
RPERA_Controller.number_of_refports     = 2
RPERA_Controller.refinport_sizes        = ints(7, 1)
RPERA_Controller.number_of_ffwports     = 0
RPERA_Controller.gains                  = array(20000.0,    20000.0,    10000.0,    17500.0,    17500.0,    17500.0,    21500.0,    6000.0);
RPERA_Controller.zero_freq_WeakIntegrator = array(0.0065,   0.0065,     0.009,      0.004,      0.004,      0.02,       0.02,       0.000001);
RPERA_Controller.zero_freq_LeadLag      = array(25.0,       25.0,       15.0,       100.0,      100.0,      5.0,        5.0,        5.0)
RPERA_Controller.pole_freq_LeadLag      = array(80.0,       80.0,       40.0,       200.0,      200.0,      40.0,       40.0,       50.0)
RPERA_Controller.pole_freq_LowPass      = array(125.0,      125.0,      125.0,      125.0,      62.5,       125.0,      125.0,      125.0)
RPERA_Controller.pole_damp_LowPass      = array(0.7,        0.7,        0.7,        0.7,        0.7,        0.7,        0.7,        0.7)
RPERA_Controller.configure

### Safety ###
loadComponent("RPERA_Safety",           "SUPERVISORY::Safety")
addPeer("Supervisor",                   "RPERA_Safety")
addPeer("RPERA_Safety",                 "TrajectoryActionlib")
setActivity("RPERA_Safety",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Safety.prefix                     = "RPERA"
RPERA_Safety.partNr                     = BODYPARTNR
RPERA_Safety.Nj                         = N
RPERA_Safety.Nm                         = N
RPERA_Safety.maxJointErrors             = MAXERRORS
RPERA_Safety.motorSaturations           = array(1000.0,     1000.0,     400.0,      500.0,      500.0,      500.0,      500.0,      900.0)
RPERA_Safety.maxConSatTime              = 5.0
RPERA_Safety.configure

### PERA Homing ###                     ## Note that all properties follow the [q1,q2,q3....q8] structure and not the structure provided by homing_order
loadComponent("RPERA_Homing",           "SUPERVISORY::Homing")
connectPeers("Supervisor",              "RPERA_Homing")
addPeer("RPERA_Homing",                 "EtherCATread")
addPeer("RPERA_Homing",                 "TrajectoryActionlib")
addPeer("RPERA_Homing",                 "RPERA_Safety")
addPeer("RPERA_Homing",                 "RPERA_GripperControl")
setActivity("RPERA_Homing",TS,HighestPriority,ORO_SCHED_RT)
RPERA_Homing.new_structure              = true
RPERA_Homing.vector_size                = N
RPERA_Homing.number_of_outports         = 2
RPERA_Homing.outport_sizes              = ints(7 , 1)
RPERA_Homing.bodypart                   = BODYPARTNAME
RPERA_Homing.partNr                     = BODYPARTNR
RPERA_Homing.jointnames                 = JOINT_NAMES
RPERA_Homing.prefix                     = "RPERA"
RPERA_Homing.homing_type                = ints(     3,      3,      2,      2,      2,      2,      2,      4)
RPERA_Homing.require_homing             = ints(     1,      1,	 	1, 		1,	 	1, 		1,	 	1, 		1)
RPERA_Homing.homing_direction           = ints(     1,      -1,     -1,     -1,     -1,     -1,     -1,     -1)
RPERA_Homing.homing_velocity            = array(    0.05,   0.05,   0.25,   0.25,   0.25,   0.2,    0.2,    1.0)
RPERA_Homing.homing_acceleration        = array(    0.2,    0.2,    0.3,    0.5,    0.5,    0.5,    0.5,    0.5)
RPERA_Homing.homing_stroke              = HOMINGSTROKE
RPERA_Homing.reset_stroke               = array(    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
RPERA_Homing.require_reset              = ints      (1,     1,      0,      1,      0,      0,      0,      0   )
RPERA_Homing.homing_endpos              = RESETPOS
RPERA_Homing.homing_errors              = array(    0.03,   0.03,   0.03,   0.03,   0.03,   0.03,   0.03,   0.03)
RPERA_Homing.homing_absPos              = ABSPOS
RPERA_Homing.homing_forces              = array(    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    GRIPPERHOMINGFORCE)
RPERA_Homing.homing_order               = ints(     8,      6,      7,      5,      4,      3,      2,      1)
RPERA_Homing.interpolatorDt             = TS
RPERA_Homing.interpolatorEps            = 1.0
RPERA_Homing.configure

### HANDOVER DETECTOR ###
loadComponent("RPERA_HandoverDetector", "ARM::HandoverDetector")
addPeer("Supervisor","RPERA_HandoverDetector")
setActivity("RPERA_HandoverDetector",0.01,HighestPriority/2,ORO_SCHED_RT)
RPERA_HandoverDetector.threshold        = 0.01
RPERA_HandoverDetector.configure

#### Diagnostics ###
loadComponent("RPERA_Diagnostics",      "ROS::RosDiagnostics")
setActivity("RPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
RPERA_Diagnostics.statusname            = BODYPARTNAME+"_Controller"
RPERA_Diagnostics.NumberOfVectorPorts   = 3
RPERA_Diagnostics.NumberOfBoolPorts     = 1
RPERA_Diagnostics.configure
RPERA_Diagnostics.vecname1              = "Reference Interpolator"
RPERA_Diagnostics.vecname2              = "Joint Errors"
RPERA_Diagnostics.vecname3              = "Reference Path Planning"
RPERA_Diagnostics.boolname1             = "Error"

#### CONNECT COMPONENTS ####
## Control loop ##
connect(SL_ID_RSHOULDER+".encoder1",                "EtherCATread.right_arm_Ein1",              ConnPolicy() ); # Enc 1
connect(SL_ID_RSHOULDER+".encoder2",                "EtherCATread.right_arm_Ein2",              ConnPolicy() ); # Enc 2
connect(SL_ID_RUPPERARM+".encoder1",                "EtherCATread.right_arm_Ein3",              ConnPolicy() ); # Enc 3
connect(SL_ID_RUPPERARM+".encoder2",                "EtherCATread.right_arm_Ein4",              ConnPolicy() ); # Enc 4
connect(SL_ID_RUPPERARM+".encoder3",                "EtherCATread.right_arm_Ein5",              ConnPolicy() ); # Enc 5
connect(SL_ID_RLOWERARM+".encoder1",                "EtherCATread.right_arm_Ein6",              ConnPolicy() ); # Enc 6
connect(SL_ID_RLOWERARM+".encoder2",                "EtherCATread.right_arm_Ein7",              ConnPolicy() ); # Enc 7
connect(SL_ID_RLOWERARM+".encoder3",                "EtherCATread.right_arm_Ein8",              ConnPolicy() ); # Enc 8
connect(SL_ID_RSHOULDER+".forceSensors",            "EtherCATread.right_arm_Ain1",              ConnPolicy() )
connect(SL_ID_RUPPERARM+".forceSensors",            "EtherCATread.right_arm_Ain2",              ConnPolicy() )
connect(SL_ID_RLOWERARM+".forceSensors",            "EtherCATread.right_arm_Ain3",              ConnPolicy() )
connect(SL_ID_RSHOULDER+".positionSensors",         "EtherCATread.right_arm_Ain4",              ConnPolicy() )
connect(SL_ID_RUPPERARM+".positionSensors",         "EtherCATread.right_arm_Ain5",              ConnPolicy() )
connect(SL_ID_RLOWERARM+".positionSensors",         "EtherCATread.right_arm_Ain6",              ConnPolicy() )

connect("EtherCATread.right_arm_Eout1",             "RPERA_Controller.pos_in",                  ConnPolicy() ); # Position JS
connect("RPERA_Controller.out",                     "EtherCATwrite.right_arm_Ain1",             ConnPolicy() ); # ControlEffort MS
connect("EtherCATwrite.right_arm_Aout1",            SL_ID_RSHOULDER+".pwmDutyMotors",           ConnPolicy() );
connect("EtherCATwrite.right_arm_Aout2",            SL_ID_RUPPERARM+".pwmDutyMotors",           ConnPolicy() );
connect("EtherCATwrite.right_arm_Aout3",            SL_ID_RLOWERARM+".pwmDutyMotors",           ConnPolicy() );

## References ##
connect("EtherCATread.right_arm_Eout1",             "TrajectoryActionlib.current_pos4",         ConnPolicy() ); # Initial Pos
connect("TrajectoryActionlib.pos_out4",             "RPERA_Controller.ref_in1",                 ConnPolicy() ); # Ref Pos

## Gripper control ##
connect("EtherCATread.right_arm_Aout1",             "RPERA_GripperControl.torque_in",           ConnPolicy() ); # Torqin
connect("EtherCATread.right_arm_Eout1",             "RPERA_GripperControl.position_in",         ConnPolicy() ); # Posin
connect("RPERA_GripperControl.posout",              "RPERA_Controller.ref_in2",                 ConnPolicy() ); # Posin

## Ros communication ##
connect("EtherCATread.right_arm_EoutMsg1",          "JointStateAggregator.right_arm",           ConnPolicy() ); # Jointstate

## Safety ##
connect("RPERA_Controller.jointErrors",             "RPERA_Safety.jointErrors",                 ConnPolicy() ); # JointErrors
connect("RPERA_Controller.out",                     "RPERA_Safety.controlEffort",               ConnPolicy() ); # ControlEffort
connect("RPERA_Safety.enable",                      "RPERA_Controller.enable",                  ConnPolicy() ); # Enable
connect("RPERA_Safety.error",                       "Supervisor.right_arm_error",               ConnPolicy() ); # Error
connect("RPERA_Safety.enable",                      SL_ID_RSHOULDER+".enablePort",              ConnPolicy() ); # Enable
connect("RPERA_Safety.enable",                      SL_ID_RUPPERARM+".enablePort",              ConnPolicy() ); # Enable
connect("RPERA_Safety.enable",                      SL_ID_RLOWERARM+".enablePort",              ConnPolicy() ); # Enable

## Homing ##
connect("EtherCATread.right_arm_Eout1",             "RPERA_Homing.position",                    ConnPolicy() ); # Position
connect("RPERA_Controller.jointErrors",             "RPERA_Homing.servo_error_in",              ConnPolicy() ); # JointErrors
connect("EtherCATread.right_arm_Aout1",             "RPERA_Homing.force_in",                    ConnPolicy() ); # ForceSensors
connect("EtherCATread.right_arm_Aout2",             "RPERA_Homing.abs_pos_in",                  ConnPolicy() ); # AbsoluteSensors
connect("RPERA_Homing.homing_finished",             "Supervisor.right_arm_homingfinished",      ConnPolicy() ); # Homing_finished
connect("RPERA_Homing.posout1",                     "RPERA_Controller.ref_in1",                 ConnPolicy() ); # Ref Pos
connect("RPERA_Homing.posout2",                     "RPERA_Controller.ref_in2",                 ConnPolicy() ); # Ref Pos

## Diagnostics ##
connect("TrajectoryActionlib.pos_out4",             "RPERA_Diagnostics.vec1",                   ConnPolicy() ); # Reference
connect("RPERA_Controller.jointErrors",             "RPERA_Diagnostics.vec2",                   ConnPolicy() ); # JointErrors
connect("RPERA_Controller.out",                     "RPERA_Diagnostics.vec3",                   ConnPolicy() ); # ControlEffort
connect("RPERA_Safety.error",                       "RPERA_Diagnostics.bool1",                  ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream("EtherCATread.right_arm_EoutMsg1",           ros.topic(ROBOTNS+"/right_arm/measurements"))
stream("RPERA_GripperControl.gripper_measurement",  ros.topic(ROBOTNS+"/right_arm/gripper/measurements"))
stream("RPERA_GripperControl.gripper_command",      ros.topic(ROBOTNS+"/right_arm/gripper/references"))
stream("RPERA_Diagnostics.diagnostics",             ros.topic(ROBOTNS+"/diagnostics"));

### Handover Detector
connect("EtherCATread.right_arm_Aout1",             "RPERA_HandoverDetector.torques",           ConnPolicy() );
connect("RPERA_HandoverDetector.gripper",           "RPERA_GripperControl.gripper_command",     ConnPolicy() );
stream("RPERA_HandoverDetector.toggle_human2robot", ros.topic(ROBOTNS+"/handoverdetector_right/toggle_human2robot"));
stream("RPERA_HandoverDetector.toggle_robot2human", ros.topic(ROBOTNS+"/handoverdetector_right/toggle_robot2human"));
stream("RPERA_HandoverDetector.result",             ros.topic(ROBOTNS+"/handoverdetector_right/result"));
EtherCATread.ResetEncoders(BODYPARTNR, 1, array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));

#### START COMPONENTS ####
RPERA_Diagnostics.start()
RPERA_Controller.start()
Supervisor.AddHomingOnlyPeer(   "RPERA_Homing",             BODYPARTNR)
Supervisor.AddOpOnlyPeer(       "RPERA_GripperControl",     BODYPARTNR)
Supervisor.AddOpOnlyPeer(       "RPERA_HandoverDetector",   BODYPARTNR)
Supervisor.AddEnabledPeer(      "RPERA_Safety",             BODYPARTNR)

### HANDOVER DETECTOR ###
#loadComponent("GRIP",   "ROS::AnyToROS")
#setActivity("GRIP",0.0,HighestPriority,ORO_SCHED_RT)
#GRIP.configure
#GRIP.AddDoublesToROS(8, ints(8),"pos"); # This is the event port
#GRIP.AddDoublesToROS(8, ints(8),"ref")
#GRIP.AddDoublesToROS(8, ints(8),"err")
#GRIP.AddDoublesToROS(8, ints(8),"eff")
#GRIP.AddDoublesToROS(8, ints(8),"for")
#connect("EtherCATread.right_arm_Eout1",             "GRIP.in_posEv",                ConnPolicy() )
#connect("RPERA_Controller.references",              "GRIP.in_ref",                  ConnPolicy() )
#connect("RPERA_Controller.jointErrors",             "GRIP.in_err",                  ConnPolicy() )
#connect("RPERA_Controller.out",                     "GRIP.in_eff",                  ConnPolicy() )
#connect("EtherCATread.right_arm_Aout1",             "GRIP.in_for",                  ConnPolicy() )
#stream("GRIP.outmsg_pos_8",             ros.topic(ROBOTNS+"/grip/pos"));
#stream("GRIP.outmsg_ref_8",             ros.topic(ROBOTNS+"/grip/ref"));
#stream("GRIP.outmsg_err_8",             ros.topic(ROBOTNS+"/grip/err"));
#stream("GRIP.outmsg_eff_8",             ros.topic(ROBOTNS+"/grip/eff"));
#stream("GRIP.outmsg_for_8",             ros.topic(ROBOTNS+"/grip/for"));
#GRIP.start

#### AUTOLOG ####
#Tracing.AddBodypart(BODYPARTNAME,BODYPARTNR,5,N,strings("ref","pos","err","eff","for"))
#connect("RPERA_Controller.references",              "Tracing.right_arm_ref",                    ConnPolicy() )
#connect("EtherCATread.right_arm_Eout1",             "Tracing.right_arm_pos",                    ConnPolicy() )
#connect("RPERA_Controller.jointErrors",             "Tracing.right_arm_err",                    ConnPolicy() )
#connect("RPERA_Controller.out",                     "Tracing.right_arm_eff",                    ConnPolicy() )
#connect("EtherCATread.right_arm_Aout1",             "Tracing.right_arm_for",                    ConnPolicy() )
#connect("RPERA_Safety.error",                       "Tracing.right_arm_error",                  ConnPolicy() )

#### EtherCAT ping ####
#connect(SL_ID_RSHOULDER+".encoder1","EtherCATping.in4", ConnPolicy() );
#connect(SL_ID_RUPPERARM+".encoder1","EtherCATping.in5", ConnPolicy() );
#connect(SL_ID_RLOWERARM+".encoder1","EtherCATping.in6", ConnPolicy() );
