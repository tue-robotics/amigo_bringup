#########################################################################
#																		#
# Left Philips Experimental Robotic Arm deployer file.					#
#																		#
# Max Baeten															#
#																		#
#########################################################################

#### DECLARATION OF PARAMETERS ####
var double 	TS 							= 0.001
var string 	SL_ID_LSHOULDER 			= os.getenv("SL_ID_LSHOULDER")
var string 	SL_ID_LUPPERARM 			= os.getenv("SL_ID_LUPPERARM")
var string 	SL_ID_LLOWERARM 			= os.getenv("SL_ID_LLOWERARM")
var strings JOINT_NAMES 				= strings( "shoulder_yaw_joint_left", "shoulder_pitch_joint_left", "shoulder_roll_joint_left", "elbow_pitch_joint_left", "elbow_roll_joint_left", "wrist_pitch_joint_left", "wrist_yaw_joint_left" )
var strings DUMMY_JOINT_NAMES 			= strings( "finger1_joint_left", "finger1_tip_joint_left", "finger2_joint_left", "finger2_tip_joint_left" )
var array 	UPPERJOINTLIMIT 			= array(	0.0,		1.57,		1.57, 		2.23,  		1.83, 		0.95,  		0.61,  		7.5		  )
var array 	LOWERJOINTLIMIT 			= array(	-1.57,		-1.57,		-1.57,  	0.0, 		-1.83,		-0.95, 		-0.61, 		-1.0	  )
var array 	RESETPOS					= array(	-0.1,      -0.2,         0.2,       0.8,         0.0,        0.0,        0.0)
var array 	HOMINGSTROKE 				= array(	0.0,		0.0,		-1.62,  	0.0, 		-1.95,		-1.05, 		-0.8, 		0.0		  )
var array 	MAXERRORS 					= array(	0.09,     	0.09,   	0.09,     	0.09, 	   	0.09,    	0.09, 	   	0.09, 		0.5		  )
var array 	ABSPOS						= array	(	0.594,		2.11,		0.0,		0.0,		0.0,		0.0,		0.0,		0.0		  )
var array 	ENCODERBITS					= array(   65536.0,	65536.0,	65536.0,	65536.0,	65536.0,	65536.0,	65536.0,	65536.0       )
var double 	TWOPI 						= 2.0*3.141592
var double 	GEARRATIO_SM				= 1.0/550.0
var double 	GEARRATIO_S3		    	= 1.0/371.25
var double 	GEARRATIO_EM				= 1.0/410.0
var double 	GEARRATIO_WM				= 1.0/290.0
var double 	GEARRATIO_HM				= 196.0/3249.0
var double 	ENCODERCOUNTS_SM			= 256.0*4.0
var double 	ENCODERCOUNTS_S3	    	= 256.0*4.0
var double 	ENCODERCOUNTS_EM			= 500.0*4.0
var double 	ENCODERCOUNTS_WM			= 128.0*4.0
var double 	ENCODERCOUNTS_HM			= 8.0*128.0*4.0
var double 	ENC2SI_SM					= TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM
var double 	ENC2SI_S3					= TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3
var double 	ENC2SI_EM					= TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM
var double 	ENC2SI_WM					= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM
var double 	ENC2SI_HM 					= TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM
var array 	ENC2SI						= array(	ENC2SI_SM,	ENC2SI_SM,	ENC2SI_S3,	ENC2SI_EM,	ENC2SI_EM,	ENC2SI_WM,	ENC2SI_WM,	ENC2SI_HM )
var array 	SENSORTORQUES_C1 			= array(	35.0,		87.0,		1050.0,		35.0,		300.0,		1.0,		1.0,		32.34	)
var array 	SENSORTORQUES_C2 			= array(	-0.2,		0.2,		6.0,		-0.8,		1.0,		1.0,		1.0,		0.2		)
var array 	SENSORTORQUES_C3 			= array(	-76.26,		-95.29,	    -145.16,	-38.71,		-111.7,		1.0,		1.0,	  	-80.0	)
var double 	GRIPPERFORCE				= 33.0;
var double 	GRIPPERHOMINGFORCE			= 25.0;
var int 	N							= 8
var int 	BODYPARTNR 					= 3
var string 	BODYPARTNAME 				= "left_arm"
var string	ROBOTNS						= os.getenv("ROBOTNS")
var bool 	HOMEABLE 					= true
var bool 	HOMINGOBLIGATORY			= false
var bool 	RESETTABLE					= true

### Configuring Supervisor, JointStateAggregator and TrajectoryActionlib
Supervisor.AddBodyPart( BODYPARTNR, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYPARTNAME)
TrajectoryActionlib.AddBodyPart(BODYPARTNR, JOINT_NAMES)
TrajectoryActionlib.interpolatorDt3 	= TS
TrajectoryActionlib.interpolatorEps3	= 1.0

# EtherCATread
EtherCATread.AddEncoderIns(BODYPARTNAME,array(1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0), array(8.0),array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0),array(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))
EtherCATread.AddEnc2Si_E(BODYPARTNAME, 1, ENCODERBITS, ENC2SI)
EtherCATread.AddAnalogIns(BODYPARTNAME, array(3.0, 3.0, 3.0, 3.0, 3.0, 3.0), array(8.0, 8.0), array(1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0), array(1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0))
EtherCATread.AddMatrixTransform_E(BODYPARTNAME, 1, 8, 8)
EtherCATread.left_arm1_matrixtransform1 = array( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATread.left_arm1_matrixtransform2 = array(-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATread.left_arm1_matrixtransform3 = array( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATread.left_arm1_matrixtransform4 = array( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
EtherCATread.left_arm1_matrixtransform5 = array( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
EtherCATread.left_arm1_matrixtransform6 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
EtherCATread.left_arm1_matrixtransform7 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
EtherCATread.left_arm1_matrixtransform8 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)
EtherCATread.AddSaturation_E(BODYPARTNAME,1, LOWERJOINTLIMIT, UPPERJOINTLIMIT)
EtherCATread.AddMsgOut_E(BODYPARTNAME, 1,JOINT_NAMES);
EtherCATread.AddTorqueSensor_A(BODYPARTNAME, 1, SENSORTORQUES_C1, SENSORTORQUES_C2, SENSORTORQUES_C3)

# EtherCATwrite
EtherCATwrite.AddAnalogOuts(BODYPARTNAME, array(8.0), array(3.0, 3.0, 3.0),array(1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),array(1.0, 2.0, 0.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0))
EtherCATwrite.AddMatrixTransform_A(BODYPARTNAME, 1, 8, 8)
EtherCATwrite.left_arm1_matrixtransform1 = array( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATwrite.left_arm1_matrixtransform2 = array(-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATwrite.left_arm1_matrixtransform3 = array( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
EtherCATwrite.left_arm1_matrixtransform4 = array( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
EtherCATwrite.left_arm1_matrixtransform5 = array( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
EtherCATwrite.left_arm1_matrixtransform6 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
EtherCATwrite.left_arm1_matrixtransform7 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
EtherCATwrite.left_arm1_matrixtransform8 = array( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

#### HIGH PRIORITY COMPONENTS ####

### Gripper force controller ###
loadComponent("LPERA_GripperControl",	"ARM::GripperControl")
addPeer("Supervisor","LPERA_GripperControl")
setActivity("LPERA_GripperControl",TS,HighestPriority,ORO_SCHED_RT)
LPERA_GripperControl.threshold_closed 	= GRIPPERFORCE
LPERA_GripperControl.max_pos 			= 7.5
LPERA_GripperControl.min_pos 			= 0.0
LPERA_GripperControl.gripper_vel 		= 4.0
LPERA_GripperControl.gripper_acc 		= 20.0
LPERA_GripperControl.InterpolDt 		= TS
LPERA_GripperControl.InterpolEps 		= 1.0
LPERA_GripperControl.configure

### Negative feedback controller ###
loadComponent("LPERA_Controller","FILTERS::Controller")
setActivity("LPERA_Controller",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Controller.vector_size    		= N
LPERA_Controller.controllers			= strings("WeakIntegrator","LeadLag","LowPass")
LPERA_Controller.sampling_time			= TS
LPERA_Controller.number_of_refports		= 2
LPERA_Controller.refinport_sizes		= ints(7, 1)
LPERA_Controller.number_of_ffwports		= 0
LPERA_Controller.gains					= array(20000.0, 	20000.0, 	10000.0, 	17500.0, 	17500.0, 	17500.0, 	21500.0, 	6000.0);
LPERA_Controller.zero_freq_WeakIntegrator = array(0.0065,	0.0065,		0.009, 		0.004, 		0.004, 		0.02, 		0.02, 		0.000001);
LPERA_Controller.zero_freq_LeadLag		= array(25.0, 		25.0, 		15.0, 		100.0, 		100.0,		5.0,  		5.0,  		5.0)
LPERA_Controller.pole_freq_LeadLag		= array(80.0, 		80.0, 		40.0, 		200.0, 		200.0, 		40.0, 		40.0, 		50.0)
LPERA_Controller.pole_freq_LowPass		= array(125.0, 		125.0, 		125.0, 		125.0, 		62.5, 		125.0, 		125.0, 		125.0)
LPERA_Controller.pole_damp_LowPass		= array(0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7)
LPERA_Controller.configure

### Safety ###
loadComponent("LPERA_Safety",			"SUPERVISORY::Safety")
addPeer("Supervisor",					"LPERA_Safety")
addPeer("LPERA_Safety",					"TrajectoryActionlib")
setActivity("LPERA_Safety",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Safety.prefix 					= "LPERA"
LPERA_Safety.partNr 					= BODYPARTNR
LPERA_Safety.Nj							= N
LPERA_Safety.Nm							= N
LPERA_Safety.maxJointErrors				= MAXERRORS
LPERA_Safety.motorSaturations			= array(1000.0, 	1000.0,	 	400.0, 	   	500.0,  	500.0, 	   	500.0, 		500.0, 		900.0)
LPERA_Safety.maxConSatTime				= 5.0
LPERA_Safety.configure

### PERA Homing ###						## Note that all properties follow the [q1,q2,q3....q8] structure and not the structure provided by homing_order
loadComponent("LPERA_Homing",			"SUPERVISORY::Homing")
connectPeers("Supervisor",				"LPERA_Homing")
addPeer("LPERA_Homing",					"EtherCATread")
addPeer("LPERA_Homing",					"TrajectoryActionlib")
addPeer("LPERA_Homing",					"LPERA_Safety")
addPeer("LPERA_Homing",					"LPERA_GripperControl")
setActivity("LPERA_Homing",TS,HighestPriority,ORO_SCHED_RT)
LPERA_Homing.new_structure 				= true
LPERA_Homing.vector_size 				= N
LPERA_Homing.number_of_outports 		= 2
LPERA_Homing.outport_sizes				= ints(7 , 1)
LPERA_Homing.bodypart 					= BODYPARTNAME
LPERA_Homing.partNr 					= BODYPARTNR
LPERA_Homing.jointnames					= JOINT_NAMES
LPERA_Homing.prefix 					= "LPERA"
LPERA_Homing.homing_type				= ints 		(3, 	3,	 	2, 		2,	 	2, 		2,	 	2, 		4 	)
LPERA_Homing.require_homing				= ints 		(1, 	1,	 	1, 		1,	 	1, 		1,	 	1, 		1	)
LPERA_Homing.homing_direction			= ints 		(1,		1,		-1,	 	-1, 	-1,	 	-1, 	-1,	 	-1 	)
LPERA_Homing.homing_velocity			= array 	(0.05,	0.05,	0.25,	0.25,	0.25,	0.2,	0.2,	1.0 )
LPERA_Homing.homing_acceleration		= array 	(0.2, 	0.2, 	0.3, 	0.5,	0.5, 	0.5,	0.5,	0.5	)
LPERA_Homing.homing_stroke				= HOMINGSTROKE
LPERA_Homing.reset_stroke				= array 	(0.0,	0.0,	0.0,	0.0,	0.0,	0.0,	0.0, 	0.0 )
LPERA_Homing.require_reset				= ints 		(1, 	1,	 	0, 		1,	 	0, 		0,	 	0, 		0	)
LPERA_Homing.homing_endpos				= RESETPOS
LPERA_Homing.homing_errors				= array 	(0.03,  0.03,   0.03,   0.03, 	0.03,   0.03,  	0.03,	0.03)
LPERA_Homing.homing_absPos				= ABSPOS
LPERA_Homing.homing_forces				= array 	(0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	GRIPPERHOMINGFORCE)
LPERA_Homing.homing_order				= ints 		(8,		6, 		7, 		5, 		4, 		3, 		2, 		1 	)
LPERA_Homing.interpolatorDt 			= TS
LPERA_Homing.interpolatorEps			= 1.0
LPERA_Homing.configure

### HANDOVER DETECTOR ###
loadComponent("LPERA_HandoverDetector",	"ARM::HandoverDetector")
addPeer("Supervisor","LPERA_HandoverDetector")
setActivity("LPERA_HandoverDetector",0.01,HighestPriority/2,ORO_SCHED_RT)
LPERA_HandoverDetector.threshold 		= 0.1
LPERA_HandoverDetector.configure

#### Diagnostics ###
loadComponent("LPERA_Diagnostics","ROS::RosDiagnostics")
setActivity("LPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
LPERA_Diagnostics.statusname 			= BODYPARTNAME+"_Controller"
LPERA_Diagnostics.NumberOfVectorPorts 	= 3
LPERA_Diagnostics.NumberOfBoolPorts 	= 1
LPERA_Diagnostics.configure
LPERA_Diagnostics.vecname1 				= "Reference Interpolator"
LPERA_Diagnostics.vecname2 				= "Joint Errors"
LPERA_Diagnostics.vecname3 				= "Reference Path Planning"
LPERA_Diagnostics.boolname1 			= "Error"

#### CONNECT COMPONENTS ####
## Control loop	##
connect(SL_ID_LSHOULDER+".encoder1",				"EtherCATread.left_arm_Ein1", 				ConnPolicy() ); # Enc 1
connect(SL_ID_LSHOULDER+".encoder2",				"EtherCATread.left_arm_Ein2", 				ConnPolicy() ); # Enc 2
connect(SL_ID_LUPPERARM+".encoder1",				"EtherCATread.left_arm_Ein3", 				ConnPolicy() ); # Enc 3
connect(SL_ID_LUPPERARM+".encoder2",				"EtherCATread.left_arm_Ein4", 				ConnPolicy() ); # Enc 4
connect(SL_ID_LUPPERARM+".encoder3",				"EtherCATread.left_arm_Ein5", 				ConnPolicy() ); # Enc 5
connect(SL_ID_LLOWERARM+".encoder1",				"EtherCATread.left_arm_Ein6", 				ConnPolicy() ); # Enc 6
connect(SL_ID_LLOWERARM+".encoder2",				"EtherCATread.left_arm_Ein7", 				ConnPolicy() ); # Enc 7
connect(SL_ID_LLOWERARM+".encoder3",				"EtherCATread.left_arm_Ein8", 				ConnPolicy() ); # Enc 8
connect(SL_ID_LSHOULDER+".forceSensors",			"EtherCATread.left_arm_Ain1", 				ConnPolicy() )
connect(SL_ID_LUPPERARM+".forceSensors",			"EtherCATread.left_arm_Ain2", 				ConnPolicy() )
connect(SL_ID_LLOWERARM+".forceSensors",			"EtherCATread.left_arm_Ain3", 				ConnPolicy() )
connect(SL_ID_LSHOULDER+".positionSensors",			"EtherCATread.left_arm_Ain4", 				ConnPolicy() )
connect(SL_ID_LUPPERARM+".positionSensors",			"EtherCATread.left_arm_Ain5", 				ConnPolicy() )
connect(SL_ID_LLOWERARM+".positionSensors",			"EtherCATread.left_arm_Ain6", 				ConnPolicy() )

connect("EtherCATread.left_arm_Eout1",				"LPERA_Controller.pos_in", 					ConnPolicy() ); # Position JS
connect("LPERA_Controller.out",						"EtherCATwrite.left_arm_Ain1", 				ConnPolicy() ); # ControlEffort MS
connect("EtherCATwrite.left_arm_Aout1",				SL_ID_LSHOULDER+".pwmDutyMotors", 			ConnPolicy() );
connect("EtherCATwrite.left_arm_Aout2",				SL_ID_LUPPERARM+".pwmDutyMotors", 			ConnPolicy() );
connect("EtherCATwrite.left_arm_Aout3",				SL_ID_LLOWERARM+".pwmDutyMotors", 			ConnPolicy() );

## References ##
connect("EtherCATread.left_arm_Eout1",				"TrajectoryActionlib.current_pos3",			ConnPolicy() ); #
connect("TrajectoryActionlib.pos_out3",				"LPERA_Controller.ref_in1", 				ConnPolicy() ); # Ref Pos

## Gripper control ##
connect("EtherCATread.left_arm_Aout1",				"LPERA_GripperControl.torque_in", 			ConnPolicy() ); # Torqin
connect("EtherCATread.left_arm_Eout1", 				"LPERA_GripperControl.position_in", 		ConnPolicy() ); # Posin
connect("LPERA_GripperControl.posout", 				"LPERA_Controller.ref_in2", 				ConnPolicy() ); # Posin

## Ros communication ##
connect("EtherCATread.left_arm_EoutMsg1",			"JointStateAggregator.left_arm", 			ConnPolicy() ); # Jointstate

## Safety ##
connect("LPERA_Controller.jointErrors",				"LPERA_Safety.jointErrors", 				ConnPolicy() ); # JointErrors
connect("LPERA_Controller.out",						"LPERA_Safety.controlEffort", 				ConnPolicy() ); # ControlEffort
connect("LPERA_Safety.enable",						"LPERA_Controller.enable", 					ConnPolicy() ); # Enable
connect("LPERA_Safety.error",						"Supervisor.left_arm_error", 				ConnPolicy() ); # Error
connect("LPERA_Safety.enable",						SL_ID_LSHOULDER+".enablePort", 				ConnPolicy() ); # Enable
connect("LPERA_Safety.enable",						SL_ID_LUPPERARM+".enablePort", 				ConnPolicy() ); # Enable
connect("LPERA_Safety.enable",						SL_ID_LLOWERARM+".enablePort",				ConnPolicy() ); # Enable

## Homing ##
connect("EtherCATread.left_arm_Eout1",				"LPERA_Homing.position", 					ConnPolicy() ); # Position
connect("LPERA_Controller.jointErrors",				"LPERA_Homing.servo_error_in", 				ConnPolicy() ); # JointErrors
connect("EtherCATread.left_arm_Aout1",				"LPERA_Homing.force_in", 					ConnPolicy() ); # ForceSensors
connect("EtherCATread.left_arm_Aout2",				"LPERA_Homing.abs_pos_in", 					ConnPolicy() ); # AbsoluteSensors
connect("LPERA_Homing.homing_finished",				"Supervisor.left_arm_homingfinished", 		ConnPolicy() ); # Homing_finished
connect("LPERA_Homing.posout1",						"LPERA_Controller.ref_in1", 				ConnPolicy() ); # Ref Pos
connect("LPERA_Homing.posout2",						"LPERA_Controller.ref_in2", 				ConnPolicy() ); # Ref Pos

## Diagnostics ##
connect("TrajectoryActionlib.pos_out3",				"LPERA_Diagnostics.vec1", 					ConnPolicy() ); # Reference
connect("LPERA_Controller.jointErrors",				"LPERA_Diagnostics.vec2", 					ConnPolicy() ); # JointErrors
connect("LPERA_Controller.out", 					"LPERA_Diagnostics.vec3", 					ConnPolicy() ); # ControlEffort
connect("LPERA_Safety.error",						"LPERA_Diagnostics.bool1", 					ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream("EtherCATread.left_arm_EoutMsg1", 			ros.topic("/amigo/left_arm/measurements"))
stream("LPERA_GripperControl.gripper_measurement", 	ros.topic("/amigo/left_arm/gripper/measurements"))
stream("LPERA_GripperControl.gripper_command", 		ros.topic("/amigo/left_arm/gripper/references"))
stream("LPERA_Diagnostics.diagnostics", 			ros.topic("/amigo/diagnostics"));

### Handover Detector
connect("EtherCATread.left_arm_Aout1",				"LPERA_HandoverDetector.torques", 			ConnPolicy() );
connect("LPERA_HandoverDetector.gripper", 			"LPERA_GripperControl.gripper_command", 	ConnPolicy() );
stream("LPERA_HandoverDetector.toggle_human2robot",	ros.topic("/amigo/handoverdetector_left/toggle_human2robot"));
stream("LPERA_HandoverDetector.toggle_robot2human",	ros.topic("/amigo/handoverdetector_left/toggle_robot2human"));
stream("LPERA_HandoverDetector.result", 			ros.topic("/amigo/handoverdetector_left/result"));
EtherCATread.ResetEncoders(BODYPARTNR, 1, array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));

#### START COMPONENTS ####
LPERA_Diagnostics.start()
LPERA_Controller.start()
Supervisor.AddHomingOnlyPeer(	"LPERA_Homing", 			BODYPARTNR)
Supervisor.AddOpOnlyPeer(		"LPERA_GripperControl",		BODYPARTNR)
Supervisor.AddOpOnlyPeer(		"LPERA_HandoverDetector",	BODYPARTNR)
Supervisor.AddEnabledPeer(		"LPERA_Safety", 			BODYPARTNR)

#### AUTOLOG ####
#Tracing.AddBodypart(BODYPARTNAME,BODYPARTNR,5,N,strings("ref","pos","err","eff","for"))
#connect("LPERA_Controller.references",				"Tracing.left_arm_ref", 					ConnPolicy() )
#connect("EtherCATread.left_arm_Eout1",				"Tracing.left_arm_pos", 					ConnPolicy() )
#connect("LPERA_Controller.jointErrors",				"Tracing.left_arm_err", 					ConnPolicy() )
#connect("LPERA_Controller.out",						"Tracing.left_arm_eff", 					ConnPolicy() )
#connect("EtherCATread.left_arm_Aout1",				"Tracing.left_arm_for", 					ConnPolicy() )
#connect("LPERA_Safety.error",						"Tracing.left_arm_error", 					ConnPolicy() )

##### EtherCAT ping ####
#connect(SL_ID_LSHOULDER+".encoder1","EtherCATping.in1", ConnPolicy() );
#connect(SL_ID_LUPPERARM+".encoder1","EtherCATping.in2", ConnPolicy() );
#connect(SL_ID_LLOWERARM+".encoder1","EtherCATping.in3", ConnPolicy() );
