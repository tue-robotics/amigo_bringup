########################################################################
#                                                                      #
# Head deployer file 											   	   #
#                                                                      #
# Max Baeten                                                           #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var int TUE_HighestPriority             = 46
var double 	TSdynamixel					= 0.02; 		#Runs lower than other components
var double 	RAD_TO_STEP 				= 195.37860814; # IF YOU CHANGE THIS VARIABLE, ALSO RECALCULATE PAN_MIN, PAN_MAX, TILT_MIN AND TILT_MAX, (From header file)
var double  RAD_TO_STEP_TILT			= 190.9859; # RX-64
var strings JOINT_NAMES 				= strings( "neck_pan_joint", "neck_tilt_joint" )
var int 	PAN_ID 						= 2; 			# Dynamixel id
var int 	TILT_ID 					= 1; 			# Dynamixel id
var int 	PAN_OFFSET 					= 512; 			# Center pan dynamixel
var int 	TILT_OFFSET 				= 512; 			# Center tilt dynamixel
var int 	PAN_MIN 					= -306; 		# -1.57*RAD_TO_STEP
var int 	PAN_MAX 					= 306; 			#  1.57*RAD_TO_STEP
var int 	TILT_MIN 					= -95; 			# -0.5 *RAD_TO_STEP_TILT
var int 	TILT_MAX 					= 168; 			#  0.88*RAD_TO_STEP_TILT
var int 	PAN_SPEED 					= 50
var int 	TILT_SPEED 	 				= 25
var int 	BODYPARTNR 					= 5
var int 	N							= 2
var string 	BODYPARTNAME 				= "head"
var string	ROBOTNS						= os.getenv("ROBOTNS")
var bool 	HOMEABLE 					= false
var bool 	HOMINGOBLIGATORY			= false
var bool 	RESETTABLE					= false

### AddBodyPart ###
Supervisor.AddBodyPart( BODYPARTNR, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)

## Pan-tilt controller
loadComponent("HEAD_PanTiltController", "DYNAMIXEL::DynamixelController")
setActivity("HEAD_PanTiltController",TSdynamixel,TUE_HighestPriority,ORO_SCHED_RT)
HEAD_PanTiltController.joint_names 		= JOINT_NAMES
HEAD_PanTiltController.dynamixel_ids	= ints(PAN_ID, 					TILT_ID)
HEAD_PanTiltController.dynamixel_offset = ints(PAN_OFFSET, 				TILT_OFFSET)
HEAD_PanTiltController.dynamixel_max 	= ints(PAN_OFFSET + PAN_MAX, 	TILT_OFFSET + TILT_MAX)
HEAD_PanTiltController.dynamixel_min 	= ints(PAN_OFFSET + PAN_MIN, 	TILT_OFFSET + TILT_MIN)
HEAD_PanTiltController.dynamixel_speed 	= ints(PAN_SPEED, 				TILT_SPEED)
HEAD_PanTiltController.configure

## Pan-tilt controller
loadComponent("HEAD_Enabler", 			"AMIGOHEAD::HeadEnabler")
addPeer("Supervisor",					"HEAD_Enabler")
setActivity("HEAD_Enabler",TSdynamixel,TUE_HighestPriority,ORO_SCHED_RT)
HEAD_Enabler.configure

#### CONNECT COMPONENTS ####
connect("Soem.Slave_100f.data_tx", 						"HEAD_PanTiltController.instruction",	ConnPolicy() ); # 100f.data_tx
connect("Soem.Slave_100f.data_rx", 						"HEAD_PanTiltController.status", 		ConnPolicy() ); # 100f.data_rx
connect("Soem.Slave_100f.ready_rx", 					"HEAD_PanTiltController.serialReadyRx",	ConnPolicy() ); # 100f.ready_rx
connect("Soem.Slave_100f.running", 						"HEAD_PanTiltController.serialRunning",	ConnPolicy() ); # 100f.running
connect("HEAD_PanTiltController.errortosupervisor",		"Supervisor.head_error", 				ConnPolicy() ); # Head_error
connect("HEAD_Enabler.out",								"HEAD_PanTiltController.enabler", 		ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream( "HEAD_PanTiltController.goalPos", 				ros.topic(ROBOTNS+"/neck/references"))
stream( "HEAD_PanTiltController.currentPos", 			ros.topic(ROBOTNS+"/neck/measurements"))
stream( "HEAD_PanTiltController.currentPos", 			ros.topic(ROBOTNS+"/joint_states"))

#### START COMPONENTS ####
HEAD_PanTiltController.start()
Supervisor.AddEnabledPeer("HEAD_Enabler", BODYPARTNR)

